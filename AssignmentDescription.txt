ECE 6102: Dependable Distributed Systems

Programming Assignment 4

Due date: April 25, 2017, 11:55 PM




Main Idea

In this assignment, you will implement Ito, Saito, and Nishizeki’s Share Assignment Scheme , as well as a simulator for  GridSharing systems as a terminal application. The program will be capable of taking user input for expected numbers of Byzantine, Crashed, and Leaky servers as well as the desired number of rows the user wishes to use. This terminal application will have two major parts: 1) Generating Ito Share Assignment and outputting the result in an easily viewable format (we suggest using python’s PrettyTable library) and 2) Computing GridSharing and displaying the assigned shares per server based on a user provided l,b,c, and r.

This application will help you learn about the methodologies utilized by GridSharing and be able to view their effectiveness. It will also be capable of helping a company trying to determine how many servers they should use and in what format to handle a given their desire to handle a particular number of Leaky, Byzantine, and Crashed servers.

Part 1

Implement Ito, Saito, and Nishizeki’s Share Assignment as described in the "An Approach for Fault Tolerant and Secure Data Storage in Collaborative Work Environments," Subbiah and Blough paper. This includes the following:

- Prompt the user for the total number of participants who can have access to a secret, and for the number of participants required to successfully access that secret.

- Display the total number of shares and the number of shares per participant that make this algorithm possible.

- Display in a table each participant and their respective share assignments.

- You will need to perform bounds checking on the user inputs.

Part 2

Implement the GridSharing algorithm as described in the "An Approach for Fault Tolerant and Secure Data Storage in Collaborative Work Environments," Subbiah and Blough paper. This part of the terminal application will take inputs from the user representing the number of Leaky, Byzantine, and Crashed servers that the system needs to be able to handle as well as the desired number of rows. Your application will take these inputs and compute the shares given to each participant as well as the required number of rows needed to handle the various server failures. This part completes the following:

1. Compute share allocation according to the proposed framework in the GridSharing paper.

- Prompt the user for input for number of Leaky, Byzantine, and Crashed servers the system needs to handle

- Prompt the user for input for the number of rows of servers desired

- Output characteristics of the implemented GridSharing framework based on user input:
	Leaky Servers,
	Byzantine Servers,
	Crash Servers,
	Rows,
	Min Number of Servers,
	Number of Shares per secret,

- Output a table that displays the share assignments to each server and displays which servers are in the same rows.

- You will need to perform bounds checking on the user inputs.

2. Plot

- allows the user view plots that display the following characteristics (as defined in the GridSharing paper) for a range of number of rows:
	Min Number of Servers
	Server Blowup
	Number of Shares

- Prompt the user for an l, b, and c as well as a range for r

- You will need to perform bounds checking on the user inputs.

3. Store share allocation in a CSV file.

- Prompt the user to provide a filename and store the outputted table into a .csv file that can easily be viewed in a spreadsheet.



Extra Credit
Add a separate option that allows the user to input a short string (less than 5 characters) as a secret and show how the secret is corrupted when an incorrect number of servers, or incorrect number of rows, are queried for the secret, but retrieved when providing a valid subset of servers. We recommend starting with share numbers (0 to n-1 total shares) then converting to generate random (unique) binary keys.

Useful Links/Functions:

Gridsharing Paper: http://blough.ece.gatech.edu/6102/papers/grid_sharing.pdf

How to Share a Secret Paper: http://blough.ece.gatech.edu/6102/papers/shamir.pdf

Python’s imports:
prettytable: for use when printing the tables to the terminal
matplotlib.pyplot: for graphing plots
numpy: for creating ranges
csv: for printing to files



Turn-in materials:
A .zip file, uploaded to T-Square, containing the following:
1) Your code
2) Screenshot of Terminal output from Part 1 where r=8, m=5.
3) Screenshot of GridSharing Stats and Share Assignment from part "2.1. Compute share allocation according to the proposed framework in the GridSharing paper." for l=1, b=1, c=2, r=4
4) Plots for l=2, b=2, c=3, for r = [5, 10] from part "2.2. Plot"
5) A .csv file generated by your code from part "2.3. Store share allocation in a CSV file.".
6) Extra Credit- Screenshot of a valid subset of servers queried for the secret as well as
a screenshot of an invalid subset of servers queried for the secret.
